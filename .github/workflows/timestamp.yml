name: TUF repository timestamp

on:
  schedule:
    - cron:  '30 6,18 * * *'
  workflow_dispatch:

jobs:
  tuf-timestamp:
    runs-on: ubuntu-latest
    permissions:
      id-token: 'write' # for OIDC auth for GCP authentication
      contents: 'write'
      issues: 'write'

    steps:
      - uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608
      - uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@ef5d53e30bbcd8d0836f4288f5e50ff3e086997d
        with:
          token_format: access_token
          workload_identity_provider: projects/843741030650/locations/global/workloadIdentityPools/tuf-demo/providers/tuf-demo
          service_account: tufdemo@python-tuf-kms.iam.gserviceaccount.com

      - name: Timestamp
        working-directory: metadata
        run: |
          # verify is currently not able to tell e.g. expiry from real invalid metadata
          # so we can't verify before trying to timestamp
          #tufrepo verify --root-hash 24d9b03f10ce0fe2e648833de26af60a4a8cd4e65bb396a8200a3194ae8ea76e
          tufrepo --keyring=uri edit timestamp touch

      - name: Commit new timestamp
        working-directory: metadata
        run: |
          tufrepo verify --root-hash 24d9b03f10ce0fe2e648833de26af60a4a8cd4e65bb396a8200a3194ae8ea76e

          git config user.name tufrepo
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git commit -a -m "Repository timestamp"
          git show
          git push

      - name: File an issue on timestamp failure
        if: ${{ failure() }}
        uses: actions/github-script@98814c53be79b1d30f795b907e553d8679345975
        with:
          script: |
            const repo = context.repo.owner + "/" + context.repo.repo
            const issues = await github.rest.search.issuesAndPullRequests({
              q: "Timestamp+failed+in:title+state:open+type:issue+repo:" + repo,
            })
            if (issues.data.total_count > 0) {
              console.log("Timestamp failed but an issue exists already.")
            } else {
              console.log("Timestamp failed. Creating a new issue...")
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "Timestamp cron job failed",
                body: "Timestamp cron job just failed. Have you tried turning it off and on again?"
              })
            }
